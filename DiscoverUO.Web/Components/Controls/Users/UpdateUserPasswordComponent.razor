@using System.Web
@using DiscoverUO.Lib.Shared
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms

@inject HttpClient client
@inject ISnackbar snackbar
@inject NavigationManager navManager

<MudPaper Class="ma-2 mt-2 pa-16">
    <MudItem>
        <MudForm Spacing="4">
            <MudText Typo="Typo.h1" Align="Align.Center" GutterBottom="true">Update User Password </MudText>
            <MudTextField @bind-Value="@UserPasswordData.CurrentPassword" T="string" Label="Current Password" HelperText="Confirm old password" InputType="InputType.Password" />
            <MudTextField @bind-Value="@UserPasswordData.NewPassword" T="string" Label="New Password" HelperText="Choose a strong password" InputType="InputType.Password" />
            <MudButton Variant="Variant.Outlined" Color="Color.Inherit" OnClick="@UpdateDataOnClick">Update</MudButton>
        </MudForm>
    </MudItem>
    <MudItem>
        @if ( validationFailed && validationErrors.Count > 0 )
        {
            @foreach( string error in validationErrors )
            {
                <MudText Align="Align.Center">@error</MudText>
            }
        }

        @if( updateFailed )
        {
            <MudText Align="Align.Center">@updateError</MudText>
        }
    </MudItem>
</MudPaper>

@code {

    [CascadingParameter]
    public SessionManager UserSession{ get; set; }

    private bool validationFailed = false;
    private List<string> validationErrors;

    private bool updateFailed = false;
    private string updateError = string.Empty;

    private UpdateUserPasswordData UserPasswordData;


    protected override void OnInitialized()
    {
        base.OnInitialized();

        UserPasswordData = new UpdateUserPasswordData();
        UserPasswordData.CurrentPassword = string.Empty;
        UserPasswordData.NewPassword = string.Empty;
    }

    private void UpdateDataOnClick()
    {
        if (!ValidateUpdateData())
        {
            StateHasChanged();
            return;
        }

        var passwordRsp = UserSession.UpdateUserPassword(UserSession.Username, UserPasswordData, client);

        if (!passwordRsp.Success )
        {
            updateFailed = true;
            updateError = passwordRsp.Message;
            snackbar.Add(updateError, Severity.Error);
            StateHasChanged();
            return;
        }
        else
        {
            updateFailed = false;

            UserSession.SignOut();
            snackbar.Add("Password updated.  Please sign back in with your new password.", Severity.Success);

            StateHasChanged();

            navManager.NavigateTo("/signin");
            navManager.Refresh(true);
        }
    }

    private bool ValidateUpdateData()
    {
        validationErrors = new List<string>();

        var pwErrors = VerifyPasswordRequirements(UserPasswordData.NewPassword);

        if (pwErrors.Count > 0)
            validationErrors.AddRange(pwErrors);

        if (validationErrors.Count > 0)
            validationFailed = true;
            
        return validationFailed;
    }

    private List<string> VerifyPasswordRequirements(string pw)
    {
        List<string> errors = new List<string>();

        if (string.IsNullOrWhiteSpace(pw))
        {
            errors.Add("Password is null or empty!");
            return errors;
        }

        if (pw.Length < 8 )
            errors.Add("Password must be at least 8 chracters in length.");

        if (pw.Length > 16)
            errors.Add("Password must be less than 16 characters in length.");

        if (!Regex.IsMatch(pw, @"[A-Z]"))
            errors.Add("Password must contain at least one uppercase letter.");

        if (!Regex.IsMatch(pw, @"[a-z]"))
            errors.Add("Password must contain at least one lowercase letter.");

        if (!Regex.IsMatch(pw, @"[0-9]"))
            errors.Add("Password must contain at least one digit.");

        return errors;
    }
}