@using System.Web
@using DiscoverUO.Lib.Shared
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms

@inject HttpClient client
@inject ISnackbar snackbar
@inject NavigationManager navManager

<MudPaper Class="ma-2 mt-2 pa-16">
    <MudItem>
        <MudForm Spacing="4">
            <MudText Color="Color.Inherit" Typo="Typo.h1" Align="Align.Center" GutterBottom="true">Update Profile</MudText>
            <MudTextField @bind-Value="@UserData.UserName" T="string" Label="Username" />
            <MudTextField @bind-Value="@UserProfileData.UserDisplayName" T="string" Label="Display Name" />
            <MudTextField @bind-Value="@UserData.Email" T="string" Label="Email" />
            <MudTextField @bind-Value="@UserProfileData.UserBiography" T="string" Label="Biography" />
            <MudTextField @bind-Value="@UserProfileData.UserAvatar" T="string" Label="Avatar Url" />
            <MudButton Variant="Variant.Outlined" Color="Color.Inherit" OnClick="@UpdateDataOnClick">Update</MudButton>
        </MudForm>
    </MudItem>
    <MudItem>
        @if (!validData && validationErrors.Count > 0 )
        {
            @foreach( string err in validationErrors )
            {
                <MudText Align="Align.Center">@err</MudText>
            }
        }
        @if( !miscSuccessful && (!string.IsNullOrEmpty(updateErrors)))
        {
            <MudText Align="Align.Center">@updateErrors</MudText>
        }
    </MudItem>
</MudPaper>

@code {

    [CascadingParameter]
    public SessionManager UserSession{ get; set; }

    // Validation
    private bool validData = false;
    private List<string> validationErrors = new List<string>();

    // Response
    private bool miscSuccessful = false;
    private bool profSuccessful = false;
    private bool passSuccessful = false;
    private string updateErrors = string.Empty;

    // Registration
    private UpdateUserData UserData;
    private UpdateUserPasswordData UserPasswordData;
    private ProfileData UserProfileData;


    private void BindData()
    {
        UserData = new UpdateUserData();
        UserData.UserName = UserSession.Username;
        UserData.Email = UserSession.Email;

        UserProfileData = UserSession.UserProfile;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        BindData();

    }
    private void UpdateDataOnClick()
    {
        if (!ValidateUpdateData())
        {
            StateHasChanged();
            return;
        }

        var dataRsp = UserSession.UpdateUserData(UserData, client);

        if (dataRsp.Success)
        {
            miscSuccessful = true;
            snackbar.Add("Misc user data updated.", Severity.Success);
        }
        else
        {
            miscSuccessful = false;
            snackbar.Add("Misc user data failed to update.", Severity.Success);
        }

        var profRsp = UserSession.UpdateUserProfile(UserProfileData, client);

        if( profRsp.Success )
        {
            profSuccessful = true;
            snackbar.Add("User profile data updated.", Severity.Success);
        }
        else
        {
            profSuccessful = false;
            snackbar.Add("User profile data failed to update.", Severity.Success);
        }

        UserSession.GetUserData(client);

        StateHasChanged();
        navManager.NavigateTo("/dashboard");
    }

    private bool ValidateUpdateData()
    {
        // Created our list of error messages.
        validationErrors = new List<string>();

        // Verify username.
        if (string.IsNullOrWhiteSpace(UserData.UserName))
            validationErrors.Add("A valid username is required.");

        // Verify username is atleast 5 characters long.
        if (UserData.UserName.Length < 5)
            validationErrors.Add("A valid username is atleast 5 characters long.");

        // Verify username is less than 30 characters long.
        if (UserData.UserName.Length > 30)
            validationErrors.Add("A valid username is less than 30 characters long.");

        // Verify an email was supplied and that it contains an @ sign.
        if (string.IsNullOrEmpty(UserData.Email) || !Regex.IsMatch(UserData.Email, @"\@")) // I realize this isn't really validation but im really not doing anything with emails.
            validationErrors.Add("A valid email is required.");    


        if (!string.IsNullOrEmpty(UserProfileData.UserAvatar) && !IsValidImageUrl(UserProfileData.UserAvatar))
        {
            validationErrors.Add("Your avatar must be a valid url or empty.");
        }

        UserProfileData.UserBiography = ValidateAndSanitizeBio(UserProfileData.UserBiography);

        // Finally, verify the validation error count.  If the count is 0, there were no errors and the data is valid.
        // validData defaults to false so we do not need to set anything for the previous conditions.
        if (validationErrors.Count <= 0)
            validData = true;

        return validData;
    }

    public static bool IsValidUrl(string url)
    {
        if (Uri.TryCreate(url, UriKind.Absolute, out Uri parsedUri))
        {
            return parsedUri.Scheme == "uo" || parsedUri.Scheme == "http" || parsedUri.Scheme == "https";
        }

        if (Uri.TryCreate($"uo://{url}", UriKind.Absolute, out parsedUri))
        {
            return parsedUri.Scheme == "uo";
        }

        return false;
    }

    public bool IsValidImageUrl(string imageUrl)
    {
        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Accept.TryParseAdd("image/*");

            try
            {
                var response = httpClient.SendAsync(new HttpRequestMessage(HttpMethod.Head, imageUrl)).Result;
                return response.IsSuccessStatusCode && response.Content.Headers.ContentType.MediaType.StartsWith("image/");
            }
            catch (Exception)
            {
                return false;
            }
        }
    }

    public string ValidateAndSanitizeBio( string bio )
    {
        // Basic validation (adjust limits as needed)
        if (bio.Length > 500)
        {
            validationErrors.Add("Biography must be less than 500 characters.");
        }

        // Remove potentially harmful scripts using regular expressions
        bio = Regex.Replace(bio, @"<script[^>]*>.*?</script>", string.Empty, RegexOptions.IgnoreCase);

        // Encode special characters to prevent XSS attacks
        bio = HttpUtility.HtmlEncode(bio);

        return bio;
    }
}