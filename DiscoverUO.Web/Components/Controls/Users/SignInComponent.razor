@using System.Net
@using Blazored.LocalStorage
@using DiscoverUO.Lib.Shared;
@using DiscoverUO.Lib.Shared.Users
@using DiscoverUO.Web.Components.Pages
@using MudBlazor.Components
@inject ILocalStorageService _localStorage
@inject HttpClient _client
@inject NavigationManager _navigationManager

<MudPaper Class="pa-16 ma-2" Height="60%" Width="25%">
    <MudGrid>
        <MudForm Class="gump-background" Spacing="2" Model="@Details">
            <MudTextField Variant="Variant.Outlined" T="string" Label="Username" Typo="Typo.input" @bind-Value="@Details.Username" />
            <MudTextField Variant="Variant.Outlined" T="string" Label="Password" Typo="Typo.input" @bind-Value="@Details.Password" />
        </MudForm>
        <MudButton Variant="Variant.Outlined" OnClick="@HandleSignIn">Submit</MudButton>
        @if (ShowUIResponseMessage)
        {
            <MudAlert Severity="Severity.Error"> @UIResponseMessage </MudAlert>
        }
    </MudGrid>
</MudPaper>
@code
{
    public string UIResponseMessage { get; set; }
    public bool ShowUIResponseMessage { get; set; }
    public LoginDetails Details = new LoginDetails();

    public async Task HandleSignIn()
    {
        if (string.IsNullOrEmpty(Details.Username) || string.IsNullOrEmpty(Details.Password))
        {
            ShowUIResponseMessage = true;
            UIResponseMessage = "You MUST enter both a username and a password.";
            return;
        }

        var userName = Details.Username;

        var hashedPassword = BCrypt.HashPassword(Details.Password);

        Console.WriteLine($"Details.Username: {userName}, Details.Password: {Details.Password}, BCrypt.HashPassword: {hashedPassword}");

        try
        {
            var httpResponse = await _client.PostAsJsonAsync("https://localhost:7015/api/users/authenticate", new AuthenticationData(userName, hashedPassword ));

            if (httpResponse.IsSuccessStatusCode)
            {
                var authResponse = httpResponse.Content.ReadFromJsonAsync<AuthenticationResponse>().Result;
                var tokenString = authResponse.Value;

                await _localStorage.SetItemAsync("jwtToken", tokenString);
                StateHasChanged();
                _navigationManager.NavigateTo("/dashboard");
            }
            else
            {
                var authResponse = httpResponse.Content.ReadFromJsonAsync<AuthenticationResponse>().Result;
                UIResponseMessage = authResponse.Message;
                ShowUIResponseMessage = true;
            }
        }
        catch (HttpRequestException ex)
        {
            UIResponseMessage = $"An HttpRequest Exception was thrown: {ex.Message}";
            ShowUIResponseMessage = true;
        }
        catch (Exception ex)
        {
            UIResponseMessage = $"An unknown error occurred: {ex.Message}";
            ShowUIResponseMessage = true;
        }
        finally
        {
            Details = new LoginDetails();
        }
    }

    public class LoginDetails
    {
        [EditorRequired]
        public string Username{ get; set; }
        [EditorRequired]
        public string Password{ get; set; }
    }
}