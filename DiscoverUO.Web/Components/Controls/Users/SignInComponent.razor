@using System.Net
@using Blazored.LocalStorage
@using DiscoverUO.Lib.Shared;
@using DiscoverUO.Lib.Shared.Users
@using DiscoverUO.Web.Components.Pages
@using MudBlazor.Components
@inject ILocalStorageService _localStorage
@inject HttpClient _client
@inject NavigationManager _navigationManager

<MudPaper Class="mud-width-full ma-2 mt-2 pa-16">
    <MudItem>
        <MudForm title="Current User" Spacing="4">
            <MudText Typo="Typo.h3" Align="Align.Center" GutterBottom="true">Current User Login</MudText>
            <MudTextField Variant="Variant.Text" T="string" Label="Username" Typo="Typo.input" @bind-Value="@Details.Username" />
            <MudTextField Variant="Variant.Text" T="string" Label="Password" Typo="Typo.input" @bind-Value="@Details.Password" InputType="InputType.Password" />
            <MudButton Size="Size.Medium" Variant="Variant.Text" OnClick="@HandleSignIn">Sign In</MudButton>
            @if (ShowUIResponseMessage)
            {
                <MudAlert Severity="Severity.Error"> @UIResponseMessage </MudAlert>
            }
        </MudForm>
    </MudItem>
</MudPaper>

@code
{
    public string UIResponseMessage { get; set; }
    public bool ShowUIResponseMessage { get; set; }
    public LoginDetails Details = new LoginDetails();

    public async Task HandleSignIn()
    {
        if (string.IsNullOrEmpty(Details.Username) || string.IsNullOrEmpty(Details.Password))
        {
            ShowUIResponseMessage = true;
            UIResponseMessage = "You MUST enter both a username and a password.";
            return;
        }

        var userName = Details.Username;
        var password = Details.Password;

        AuthenticationData data = new AuthenticationData(userName, password, false);

        try
        {
            var httpResponse = await _client.PostAsJsonAsync("https://localhost:7015/api/users/authenticate", data );

            if (httpResponse.IsSuccessStatusCode)
            {
                var authResponse = httpResponse.Content.ReadFromJsonAsync<AuthenticationResponse>().Result;
                var tokenString = authResponse.Value;

                await _localStorage.SetItemAsync("jwtToken", tokenString);

                StateHasChanged();

                _navigationManager.NavigateTo("/dashboard");
            }
            else
            {
                var failedAuthResponse = httpResponse.Content.ReadFromJsonAsync<RequestFailedResponse>().Result;
                UIResponseMessage = failedAuthResponse.Message;
                ShowUIResponseMessage = true;
            }
        }
        catch (HttpRequestException ex)
        {
            UIResponseMessage = $"An HttpRequest Exception was thrown: {ex.Message}";
            ShowUIResponseMessage = true;
        }
        catch (Exception ex)
        {
            UIResponseMessage = $"An unknown error occurred: {ex.Message}";
            ShowUIResponseMessage = true;
        }
        finally
        {
            Details = new LoginDetails();
        }
    }

    private void RegisterOnClick()
    {
        _navigationManager.NavigateTo("/register");
    }

    public class LoginDetails
    {
        [EditorRequired]
        public string Username{ get; set; }
        [EditorRequired]
        public string Password{ get; set; }
    }
}