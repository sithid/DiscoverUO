@using System.Net
@using Blazored.LocalStorage
@using DiscoverUO.Lib.Shared;
@using DiscoverUO.Lib.Shared.Users
@using DiscoverUO.Web.Components.Pages
@inject ILocalStorageService _localStorage
@inject HttpClient _client
@inject NavigationManager _navigationManager

<MudContainer MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem>
            <MudPaper Elevation="1">
                <MudForm Model="@Details">
                    <MudTextField T="string" Label="Username" Typo="Typo.input" @bind-Value="@Details.Username" />
                    <MudTextField T="string" Label="Password" Typo="Typo.input" @bind-Value="@Details.Password" />
                    <MudButton Size="Size.Small" Variant="Variant.Filled" OnClick="@HandleSignIn">Submit</MudButton>
                </MudForm>
            </MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>

@code
{
    public string UIResponseMessage { get; set; }
    public bool ShowUIResponseMessage { get; set; }
    public LoginDetails Details = new LoginDetails();

    public async Task HandleSignIn()
    {
        ShowUIResponseMessage = false;

        var userName = Details.Username;

        Console.WriteLine($"Details.Username: {userName}");

        var passwordHash = BCrypt.HashPassword(Details.Password);

        Console.WriteLine($"Details.Username: {userName}, Details.PasswordHash: {passwordHash}");

        try
        {
            var httpResponse = await _client.PostAsJsonAsync("https://localhost:7015/api/users/Authenticate", new AuthenticationRequest(userName, passwordHash));

            if (httpResponse.IsSuccessStatusCode)
            {
                var authResponse = httpResponse.Content.ReadFromJsonAsync<AuthenticationResponse>().Result;
                var tokenString = authResponse.Value;

                await _localStorage.SetItemAsync("jwtToken", tokenString);
                _navigationManager.NavigateTo("/dashboard");
            }
            else
            {
                var authResponse = httpResponse.Content.ReadFromJsonAsync<AuthenticationResponse>().Result;
                UIResponseMessage = authResponse.Message;
                ShowUIResponseMessage = true;
            }
        }
        catch (HttpRequestException ex)
        {
            UIResponseMessage = $"An HttpRequest Exception was thrown: {ex.Message}";
            ShowUIResponseMessage = true;
        }
        catch (Exception ex)
        {
            UIResponseMessage = $"An unknown error occurred: {ex.Message}";
            ShowUIResponseMessage = true;
        }
        finally
        {
            StateHasChanged();
        }
    }

    public class LoginDetails
    {
        public string Username{ get; set; }
        public string Password{ get; set; }
    }
}