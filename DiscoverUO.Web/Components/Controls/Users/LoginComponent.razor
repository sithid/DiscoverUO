@using Blazored.LocalStorage
@using System.IdentityModel.Tokens.Jwt
@using System.Net.Http.Headers;

@inject ILocalStorageService _localStorage
@inject HttpClient _client;
@inject NavigationManager _navigationManager

<h3>DiscoverUO User Login</h3>

<form @onsubmit="HandleLogin">
    <div class="form-group">
        <label for="username">Username:</label>
        <input type="text" class="form-control" id="username" @bind="Username" />
    </div>
    <div class="form-group">
        <label for="password">Password:</label>
        <input type="password" class="form-control" id="password" @bind="Password" />
    </div>

    <button type="submit" class="btn btn-primary">Login</button>

    @if( ShowErrorMessage )
    {
        <div class="alert alert-danger mt-2">@ErrorMessage</div>
    }
</form>

@code
{
    public string Username { get; set; }
    public string Password { get; set; } 
    public string ErrorMessage { get; set; }
    public bool ShowErrorMessage { get; set; }

    public async Task HandleLogin()
    {
        ShowErrorMessage = false;

        try
        {
            var token = await _localStorage.GetItemAsync<string>("jwtToken");

            _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token );

            var response = await _client.PostAsJsonAsync("https://localhost:7015/api/users/Authenticate", new LoginRequest(Username, Password));

            response.EnsureSuccessStatusCode();

            var responseString = await response.Content.ReadAsStringAsync();

            var tokenHandler = new JwtSecurityTokenHandler();
            var jwtSecurityToken = tokenHandler.ReadJwtToken(responseString);

            jwtTokenString = responseString;

            _navigationManager.NavigateTo("/dashboard");
        }
        catch (HttpRequestException ex)
        {
            ErrorMessage = $"Authentication failed: {ex.Message}";
            ShowErrorMessage = true;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
            ShowErrorMessage = true;
        }
    }

    private string jwtTokenString;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if( !firstRender )
        {
            if( !string.IsNullOrEmpty(jwtTokenString))
            {
                await _localStorage.SetItemAsync("jwtToken", jwtTokenString);
            }
        }

        await base.OnAfterRenderAsync(firstRender);
    }
}