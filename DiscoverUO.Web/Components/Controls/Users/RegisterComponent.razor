@* 
    MudBlazor MudForm
    Example of a user registration form.
    https://mudblazor.com/components/form#editform-support
*@
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using DiscoverUO.Lib.Shared
@inject IDialogService DialogService
@inject HttpClient _client;
@inject NavigationManager _navigationManager


<MudGrid Class="mt-2 pa-4">
    <MudItem xs="12" sm="7">
        <MudPaper Class="pa-4">
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Username" Required="true" RequiredError="User name is required!" @bind-Value="RegisterData.UserName"/>
                <MudTextField T="string" Label="Email" Required="true" RequiredError="Email is required!"
                Validation="@(new EmailAddressAttribute() {ErrorMessage = "The email address is invalid"})" @bind-Value="RegisterData.Email" />
                <MudTextField T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                InputType="InputType.Password" Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                RequiredError="Password is required!" @bind-Value="RegisterData.Password"/>
                <MudTextField T="string"
                Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                Validation="@(new Func<string, string>(PasswordMatch))" />
                <div class="d-flex align-center justify-space-between">
                    <MudCheckBox T="bool" Required="true" RequiredError="You must agree to the terms of use!"
                    Label="I am 13 years of age or older and agree to the terms of use!" />
                </div>
                <div class="d-flex align-center justify-space-between">
                    <MudNavLink Href="/terms" Match="NavLinkMatch.All" Target="_blank" Style="width: 150px">The Terms</MudNavLink>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!success)" OnClick="@RegisterOnClick">Register</MudButton>
                </div>
            </MudForm>
        </MudPaper>
        <MudPaper Class="pa-4 mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" OnClick="@(()=>form.Validate())">Validate</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" DropShadow="false" OnClick="@(()=>form.ResetAsync())" Class="mx-2">Reset</MudButton>
            <MudButton Variant="Variant.Filled" DropShadow="false" OnClick="@(()=>form.ResetValidation())">Reset Validation</MudButton>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            @if (errors.Length > 0)
            {
                <MudText Typo="Typo.subtitle2">
                    @($"Errors ({errors.Length})")
                </MudText>
                @foreach (var error in errors)
                {
                    <MudText Color="@Color.Error">@error</MudText>
                }
            }

            @if( showMessage )
            {
                <MudText Color="@Color.Error">@registerError</MudText>
            }
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    // Validation
    MudTextField<string> pwField1;
    MudForm form;
    bool success;
    string[] errors = { };

    // API
    private RegisterUserData RegisterData { get; set; } = new RegisterUserData();
    private string registerError = string.Empty;
    private bool showMessage;

    private void RegisterOnClick()
    {
        showMessage = false;

        var rsp = _client.PostAsJsonAsync("https://localhost:7015/api/users/register", RegisterData).Result;

        if (!rsp.IsSuccessStatusCode)
        {
            var failedRsp = rsp.Content.ReadFromJsonAsync<RequestFailedResponse>().Result;
            showMessage = true;
            registerError = $"Failed Registration: {failedRsp.Message}";
            return;
        }

        RegisterUserResponse successRsp = rsp.Content.ReadFromJsonAsync<RegisterUserResponse>().Result;

        
        _navigationManager.NavigateTo("/signin");
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1.Value != arg)
            return "Passwords don't match";

        return null;
    }

}