@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using DiscoverUO.Lib.Shared
@inject IDialogService DialogService
@inject ILocalStorageService _localStorage
@inject HttpClient _client;
@inject NavigationManager _navigationManager

<MudPaper Class="ma-2 mt-2 pa-16">
    <MudItem>
        <MudForm Spacing="4">
            <MudText Typo="Typo.h1" Align="Align.Center" GutterBottom="true">Register New User</MudText>
            <MudTextField @bind-Value="@username" T="string" Label="Username" />
            <MudTextField @bind-Value="@email" T="string" Label="Email" />
            <MudTextField @bind-Value="@password" T="string" Label="Password" HelperText="Choose a strong password" InputType="InputType.Password" />
            <MudTextField @bind-Value="@confirmedPassword" T="string" Label="Password" HelperText="Repeat the password" InputType="InputType.Password" />
            <MudCheckBox @bind-Value="@acceptsTerms" T="bool" Label="I am 13 years of age or older and agree to the terms of use." />
            <div style="text-align: center">
                <MudLink Href="/terms" Target="_blank">
                    Terms Of Use
                </MudLink>
            </div>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@RegisterOnClick">Register</MudButton>
        </MudForm>
    </MudItem>
    <MudItem>
        @if (!validData && validationErrors.Count > 0 )
        {
            @foreach( string err in validationErrors )
            {
                <MudText Align="Align.Center">@err</MudText>
            }
        }
        @if( !successfulRegistration && (!string.IsNullOrEmpty(registrationError)))
        {
            <MudText Align="Align.Center">@registrationError</MudText>
        }
    </MudItem>
</MudPaper>

@code {
    // Validation
    private bool validData = false;
    private List<string> validationErrors = new List<string>();
    private bool acceptsTerms = false;
    // Response
    private bool successfulRegistration = false;
    private string registrationError = string.Empty;

    // Registration
    private RegisterUserData RegisterData;
    private string username = string.Empty;
    private string email = string.Empty;
    private string password = string.Empty;
    private string confirmedPassword = string.Empty;

    private void RegisterOnClick()
    {
        if (!ValidateRegistrationData())
        {
            StateHasChanged();
            return;
        }

        RegisterData = new RegisterUserData();
        RegisterData.UserName = username;
        RegisterData.Password = password;
        RegisterData.Email = email;

        var rsp = _client.PostAsJsonAsync("https://localhost:7015/api/users/register", RegisterData).Result;

        if (!rsp.IsSuccessStatusCode)
        {
            var failedRsp = rsp.Content.ReadFromJsonAsync<RequestFailedResponse>().Result;
            successfulRegistration = false;
            registrationError = $"Failed Registration: {failedRsp.Message}";

            StateHasChanged();

            return;
        }

        BasicSuccessResponse successRsp = rsp.Content.ReadFromJsonAsync<BasicSuccessResponse>().Result;

        AuthenticationData data = new AuthenticationData(username, password, false);

        try
        {
            var httpResponse = _client.PostAsJsonAsync("https://localhost:7015/api/users/authenticate", data).Result;

            if (httpResponse.IsSuccessStatusCode)
            {
                var authResponse = httpResponse.Content.ReadFromJsonAsync<AuthenticationResponse>().Result;
                var tokenString = authResponse.Value;

                _localStorage.SetItemAsync("jwtToken", tokenString);

                StateHasChanged();

                _navigationManager.NavigateTo("/dashboard");
            }
            else
            {
                var failedAuthResponse = httpResponse.Content.ReadFromJsonAsync<RequestFailedResponse>().Result;

                Console.WriteLine($"User registration successful but login afterwards failed.");
                Console.WriteLine($"Username: {username}");
                Console.WriteLine($"StatusCode: {failedAuthResponse.StatusCode}");
                Console.WriteLine($"Message: {failedAuthResponse.Message}");
            }
        }
        catch( Exception ex )
        {
            Console.WriteLine($"User registration successful but login afterwards threw an exception:");
            Console.WriteLine($"Username:  {username}");
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    private bool ValidateRegistrationData()
    {
        validationErrors = new List<string>();

        if (string.IsNullOrWhiteSpace(username))
            validationErrors.Add("Username is a required field.");

        if (string.IsNullOrEmpty(email) || !email.Contains("@")) // I realize this is crap validation but im really not doing anything with emails.
            validationErrors.Add("A valid email is a required field.");    

        var pwErrors = VerifyPasswordRequirements(password);

        if (pwErrors.Count > 0)
            validationErrors.AddRange(pwErrors);

        if (!acceptsTerms)
            validationErrors.Add("You must be 13 or older and agree to the terms of use.");

        if (validationErrors.Count <= 0)
            validData = true;

        return validData;
    }

    private List<string> VerifyPasswordRequirements(string pw)
    {
        List<string> errors = new List<string>();

        if (string.IsNullOrWhiteSpace(pw))
        {
            errors.Add("Password is null or empty!");
            return errors;
        }

        if (!PasswordsMatch(password, confirmedPassword))
            errors.Add("Passwords do not match.");

        if (pw.Length < 8)
            errors.Add("Password must be at least of length 8");

        if (!Regex.IsMatch(pw, @"[A-Z]"))
            errors.Add("Password must contain at least one capital letter");

        if (!Regex.IsMatch(pw, @"[a-z]"))
            errors.Add("Password must contain at least one lowercase letter");

        if (!Regex.IsMatch(pw, @"[0-9]"))
            errors.Add("Password must contain at least one digit");

        return errors;
    }

    private bool PasswordsMatch(string arg, string arg2 )
    {
        if (!string.Equals(arg, arg2))
            return false;

        return true;
    }
}