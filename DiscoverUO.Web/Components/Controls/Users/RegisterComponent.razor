@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using DiscoverUO.Lib.Shared
@inject IDialogService DialogService
@inject ILocalStorageService _localStorage
@inject HttpClient _client;
@inject NavigationManager _navigationManager

<MudPaper Class="ma-2 mt-2 pa-16">
    <MudItem>
        <MudForm Spacing="4">
            <MudText Typo="Typo.h1" Align="Align.Center" GutterBottom="true">Register New User</MudText>
            <MudTextField @bind-Value="@username" T="string" Label="Username" />
            <MudTextField @bind-Value="@email" T="string" Label="Email" />
            <MudTextField @bind-Value="@password" T="string" Label="Password" HelperText="Choose a strong password" InputType="InputType.Password" />
            <MudTextField @bind-Value="@confirmedPassword" T="string" Label="Password" HelperText="Repeat the password" InputType="InputType.Password" />
            <MudCheckBox @bind-Value="@acceptsTerms" T="bool" Label="I am 13 years of age or older and agree to the terms of use." />
            <div style="text-align: center">
                <MudLink Href="/terms" Target="_blank">
                    Terms Of Use
                </MudLink>
            </div>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@RegisterOnClick">Register</MudButton>
        </MudForm>
    </MudItem>
    <MudItem>
        @if (!validData && validationErrors.Count > 0 )
        {
            @foreach( string err in validationErrors )
            {
                <MudText Align="Align.Center">@err</MudText>
            }
        }
        @if( !successfulRegistration && (!string.IsNullOrEmpty(registrationError)))
        {
            <MudText Align="Align.Center">@registrationError</MudText>
        }
    </MudItem>
</MudPaper>

@code {
    // Validation
    private bool validData = false;
    private List<string> validationErrors = new List<string>();
    private bool acceptsTerms = false;

    // Response
    private bool successfulRegistration = false;
    private string registrationError = string.Empty;

    // Registration
    private RegisterUserData RegisterData;
    private string username = string.Empty;
    private string email = string.Empty;
    private string password = string.Empty;
    private string confirmedPassword = string.Empty;

    private void RegisterOnClick()
    {
        if (!ValidateRegistrationData())
        {
            StateHasChanged();
            return;
        }

        RegisterData = new RegisterUserData();
        RegisterData.UserName = username;
        RegisterData.Password = password;
        RegisterData.Email = email;

        var rsp = _client.PostAsJsonAsync("https://localhost:7015/api/users/register", RegisterData).Result;

        if (!rsp.IsSuccessStatusCode)
        {
            var failedRsp = rsp.Content.ReadFromJsonAsync<RequestFailedResponse>().Result;
            successfulRegistration = false;
            registrationError = $"Failed Registration: {failedRsp.Message}";

            StateHasChanged();

            return;
        }

        RegisterUserResponse successRsp = rsp.Content.ReadFromJsonAsync<RegisterUserResponse>().Result;

        Console.WriteLine($"A new user has been registered: Username: {successRsp.Entity.UserName}, Role: {successRsp.Entity.Role}");

        AuthenticationData data = new AuthenticationData(username, password, false);

        try
        {
            var httpResponse = _client.PostAsJsonAsync("https://localhost:7015/api/users/authenticate", data).Result;

            if (httpResponse.IsSuccessStatusCode)
            {
                var authResponse = httpResponse.Content.ReadFromJsonAsync<AuthenticationResponse>().Result;
                var tokenString = authResponse.Entity.SecurityToken;

                _localStorage.SetItemAsync("jwtToken", tokenString);

                StateHasChanged();

                _navigationManager.NavigateTo("/dashboard");
            }
            else
            {
                var failedAuthResponse = httpResponse.Content.ReadFromJsonAsync<RequestFailedResponse>().Result;

                Console.WriteLine($"User registration successful but login afterwards failed.");
                Console.WriteLine($"Username: {username}");
                Console.WriteLine($"StatusCode: {failedAuthResponse.StatusCode}");
                Console.WriteLine($"Message: {failedAuthResponse.Message}");

                // Auto signin failed, redirect to sign in page.
                _navigationManager.NavigateTo("/signin");
            }
        }
        catch( Exception ex )
        {
            Console.WriteLine($"User registration successful but login afterwards threw an exception:");
            Console.WriteLine($"Username:  {username}");
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    ///  <summary>
    /// Registration validation which ensures a username, email, and password are supplied and the password meets the requirments.
    /// </summary>
    /// <returns>Returns true if there are no validation errors.</returns>
    private bool ValidateRegistrationData()
    {
        // Created our list of error messages.
        validationErrors = new List<string>();

        // Verify username.
        if (string.IsNullOrWhiteSpace(username))
            validationErrors.Add("A valid username is required.");

        // Verify username is atleast 5 characters long.
        if (username.Length < 5 )
            validationErrors.Add("A valid username is atleast 5 characters long.");

        // Verify username is less than 30 characters long.
        if (username.Length > 30)
            validationErrors.Add("A valid username is less than 30 characters long.");

        // Verify an email was supplied and that it contains an @ sign.
        if (string.IsNullOrEmpty(email) || !Regex.IsMatch(email, @"\@")) // I realize this isn't really validation but im really not doing anything with emails.
            validationErrors.Add("A valid email is required.");    

        // Use regex to verify password complexity requirments are met.
        var pwErrors = VerifyPasswordRequirements(password);

        // If there were errors found with the password, add them to the validation error list.
        if (pwErrors.Count > 0)
            validationErrors.AddRange(pwErrors);

        // Users MUST accept the terms (found in the link below the accept box).
        if (!acceptsTerms)
            validationErrors.Add("You must be 13 or older and agree to the terms of use.");

        // Finally, verify the validation error count.  If the count is 0, there were no errors and the data is valid.
        // validData defaults to false so we do not need to set anything for the previous conditions.
        if (validationErrors.Count <= 0)
            validData = true;

        return validData;
    }

    /// <summary>
    /// Verifies password requirements.
    /// </summary>
    /// <param name="pw"></param>
    /// <returns>Returns a list of validation errors for the specified password.</returns>
    private List<string> VerifyPasswordRequirements(string pw)
    {
        // Created our list of password errors.
        List<string> errors = new List<string>();

        // We dont allow empty passwords.
        if (string.IsNullOrWhiteSpace(pw))
        {
            errors.Add("Password is null or empty!");

            // If the password is empty, there is no point in attempting to evaluate any of the remaining conditions, they will all fail.
            return errors;
        }

        // Confirm the password challenge matches.
        if (!PasswordsMatch(password, confirmedPassword))
            errors.Add("Passwords do not match.");

        // Enforce password length 8  to 16 chracters.
        if (pw.Length < 8 )
            errors.Add("Password must be at least 8 chracters in length.");

        // Enforce password length 8  to 16 chracters.
        if (pw.Length > 16)
            errors.Add("Password must be less than 16 characters in length.");

        // Enforce at least one upppercase letter in the password.
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            errors.Add("Password must contain at least one uppercase letter.");

        // Enforce at least one lowercase letter in the password.
        if (!Regex.IsMatch(pw, @"[a-z]"))
            errors.Add("Password must contain at least one lowercase letter.");

        // Enforce atleast one number in the password.
        if (!Regex.IsMatch(pw, @"[0-9]"))
            errors.Add("Password must contain at least one digit.");

        return errors;
    }

    /// <summary>
    /// Checks to see if the two passwords match.
    /// </summary>
    /// <param name="arg"></param>
    /// <param name="arg2"></param>
    /// <returns>Returns true if the passwords match</returns>
    private bool PasswordsMatch(string arg, string arg2 )
    {
        if (!string.Equals(arg, arg2))
            return false;

        return true;
    }
}