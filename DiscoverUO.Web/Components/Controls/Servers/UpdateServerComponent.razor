@using DiscoverUO.Lib.Shared
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations

@inject HttpClient client
@inject ISnackbar snackbar
@inject NavigationManager navManager

<MudPaper Class="ma-2 mt-2 pa-16">
    <MudItem>
        <MudForm Spacing="4">
            <MudText Typo="Typo.h1" Align="Align.Center" GutterBottom="true">Update Public Server</MudText>
            <MudTextField @bind-Value="@updateData.ServerName" T="string" Label="Server Name" />
            <MudTextField @bind-Value="@updateData.ServerAddress" T="string" Label="Server Connection Address" />
            <MudTextField @bind-Value="@updateData.ServerPort" T="int" Label="Port" />
            <MudTextField @bind-Value="@updateData.ServerWebsite" T="string" Label="Server Website" />
            <MudTextField @bind-Value="@updateData.ServerBanner" T="string" Label="Server Banner" />
            <MudTextField @bind-Value="@updateData.ServerEra" T="string" Label="Server Era" />
            <MudCheckBox @bind-Value="@updateData.PvPEnabled" T="bool" Label="PvP Enabled" />
            <MudCheckBox @bind-Value="@updateData.IsPublic" T="bool" Label="Is Public" />
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" OnClick="@SubmitUpdate">Update Server</MudButton>
        </MudForm>
    </MudItem>
    <MudItem>
        @if (errors.Count > 0)
        {
            @foreach (string err in errors)
            {
                <MudText Align="Align.Center">@err</MudText>
            }
        }
    </MudItem>
</MudPaper>

@code
{

    [CascadingParameter]
    public SessionManager UserSession{ get; set; }

    private ServerUpdateData updateData = new ServerUpdateData();

    private List<string> errors = new List<string>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        SetBindData();
    }

    private void SetBindData()
    {
        updateData.ServerName = UserSession.UpdatingServerTmp.ServerName;
        updateData.ServerAddress = UserSession.UpdatingServerTmp.ServerAddress;
        updateData.ServerPort = UserSession.UpdatingServerTmp.ServerPort;
        updateData.PvPEnabled = UserSession.UpdatingServerTmp.PvPEnabled;
        updateData.IsPublic = UserSession.UpdatingServerTmp.IsPublic;
        updateData.ServerEra = UserSession.UpdatingServerTmp.ServerEra;
        updateData.ServerBanner = UserSession.UpdatingServerTmp.ServerBanner;
        updateData.ServerWebsite = UserSession.UpdatingServerTmp.ServerWebsite;
    }

    private bool ValidItemData(ServerUpdateData data)
    {
        errors = new List<string>();

        if (string.IsNullOrEmpty(data.ServerName) || data.ServerName.Length < 8)
            errors.Add("Server name must be atleast 8 characters long.");

        if (!string.IsNullOrEmpty(data.ServerWebsite))
        {
            if (!IsValidUrl(data.ServerWebsite))
                errors.Add("Server website must be a valid url or empty.");
        }

        if (!string.IsNullOrEmpty(data.ServerBanner))
        {
            if (IsValidUrl(data.ServerBanner))
            {
                if (!IsValidImageUrl(data.ServerBanner))
                {
                    errors.Add("Server banner must be a valid image url of empty.");
                }
            }
        }

        if (!IsValidUrl(data.ServerAddress))
            errors.Add("Server address must be a valid url or hostname.");

        if (data.ServerPort <= 0)
            errors.Add("Server port must be an integer greater than 0.");

        if (string.IsNullOrEmpty(data.ServerEra) || data.ServerEra.Length < 2)
            errors.Add("Server era must be atleast 2 characters long.");

        return errors.Count == 0;
    }

    private void SubmitUpdate()
    {
        UserSession.UpdatingServerTmp = updateData;

        if (!ValidItemData(UserSession.UpdatingServerTmp))
        {
            return;
        }

        var updateServerRsp = UserSession.UpdateServer(UserSession.UpdatingServerId, UserSession.UpdatingServerTmp, client);

        if (updateServerRsp.Success)
        {
            snackbar.Add(updateServerRsp.Message, Severity.Success);
            navManager.NavigateTo("/");
        }
        else
        {
            snackbar.Add($"Failed to add the server: {updateServerRsp.Message}", Severity.Error);
            return;
        }
    }

    public static bool IsValidUrl(string url)
    {
        if (Uri.TryCreate(url, UriKind.Absolute, out Uri parsedUri))
        {
            return parsedUri.Scheme == "uo" || parsedUri.Scheme == "http" || parsedUri.Scheme == "https";
        }

        if (Uri.TryCreate($"uo://{url}", UriKind.Absolute, out parsedUri))
        {
            return parsedUri.Scheme == "uo";
        }

        return false;
    }

    public bool IsValidImageUrl(string imageUrl)
    {
        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Accept.TryParseAdd("image/*");

            try
            {
                var response = httpClient.SendAsync(new HttpRequestMessage(HttpMethod.Head, imageUrl)).Result;
                return response.IsSuccessStatusCode && response.Content.Headers.ContentType.MediaType.StartsWith("image/");
            }
            catch (Exception)
            {
                return false;
            }
        }
    }
}