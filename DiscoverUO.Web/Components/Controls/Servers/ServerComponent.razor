@using System.Net
@using Blazored.LocalStorage
@inject ILocalStorageService _localStorage
@inject HttpClient _client

@if( ServerData != null )
{
    <MudPaper>
        <MudItem Class="mt-4 pa-4 mud-theme-secondary">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h3" Align="Align.Center">@ServerData.ServerName</MudText>

                    @if (showBanner)
                    {
                        <MudCardMedia Height="150" Image="@ServerData.ServerBanner" />
                    }

                    <MudText Typo="Typo.h5" Align="Align.Justify">Server Details: @serverDetails</MudText>
                    <MudText Typo="Typo.h5" Align="Align.Justify">  Logon Server: @connectionDetails</MudText>
                    <MudText Typo="Typo.h5" Align="Align.Justify">
                        Shard Website: <a target="_blank" href="@ServerData.ServerWebsite">@ServerData.ServerWebsite</a>
                    </MudText>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudPaper>
}

@code {
    [Parameter]
    public ServerData ServerData{ get; set; }
    public bool showBanner { get; set; }
    private string serverDetails = string.Empty;
    private string connectionDetails = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var pvpEnabled = ServerData.PvPEnabled ? "PvP Enabled" : "PvP Disabled";

        serverDetails = $"{ServerData.ServerEra} Era, {pvpEnabled}, {ServerData.Votes} Votes";
        connectionDetails = $"{ServerData.ServerAddress} Port {ServerData.ServerPort}";

        showBanner = IsValidUrl(ServerData.ServerBanner);
    }

    public static bool IsValidUrl(string url)
    {
        try
        {
            Uri.TryCreate(url, UriKind.Absolute, out Uri result);
            return (result != null) && (result.Scheme == Uri.UriSchemeHttp || result.Scheme == Uri.UriSchemeHttps);
        }
        catch (Exception)
        {
            return false;
        }
    }
}
