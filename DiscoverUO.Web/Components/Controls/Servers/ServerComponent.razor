@using System.Net
@using System.Net.Http.Headers
@using DiscoverUO.Lib.Shared
@using DiscoverUO.Lib.Shared.Contracts
@using Blazored.LocalStorage
@inject ILocalStorageService _localStorage
@inject NavigationManager _navManager
@inject HttpClient _client

@if( ServerData != null )
{
    <MudPaper>
        <MudItem Class="mt-4 pa-4 mud-theme-secondary">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h2" Align="Align.Center">@ServerData.ServerName</MudText>
                    @if (showBanner) {
                        <MudCardMedia Height="150" Image="@ServerData.ServerBanner" /> }
                    <MudText Typo="Typo.h5" Align="Align.Center">Server Details: @serverDetails</MudText>
                    <MudText Typo="Typo.h5" Align="Align.Center">  Logon Server: @connectionDetails</MudText>
                    <MudText Typo="Typo.h5" Align="Align.Center">
                        Shard Website: <a target="_blank" href="@ServerData.ServerWebsite">@ServerData.ServerWebsite</a>
                    </MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudSpacer />
                    <MudText Typo="Typo.h5" Align="Align.Center">Server ID: @ServerData.Id</MudText>
                    <MudSpacer />
                    <MudButton Variant="Variant.Outlined" OnClick="@AddToFavorites" Color="Color.Primary">Add To Favorites</MudButton>
                    <MudButton Variant="Variant.Outlined" Color=" Color.Primary">Vote</MudButton>
                    <MudSpacer />
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudPaper>
}

@code {
    [Parameter]
    public ServerData ServerData{ get; set; }

    [CascadingParameter]
    public SessionManager UserSession{ get; set; }

    public bool showBanner { get; set; }
    private string serverDetails = string.Empty;
    private string connectionDetails = string.Empty;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        var pvpEnabled = ServerData.PvPEnabled ? "PvP Enabled" : "PvP Disabled";

        serverDetails = $"Era: {ServerData.ServerEra}, {pvpEnabled}, {ServerData.Votes} Votes";
        connectionDetails = $"{ServerData.ServerAddress} Port {ServerData.ServerPort}";

        showBanner = IsValidUrl(ServerData.ServerBanner);
    }

    private int clicked = 0;

    private async Task AddToFavorites()
    {
        if (string.IsNullOrEmpty(UserSession.SecurityToken))
            _navManager.NavigateTo("/signin");

        _client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", UserSession.SecurityToken);

        var favItemData = new FavoriteItemData
        {
            ServerId = ServerData.Id,
            ServerName = ServerData.ServerName,
            ServerAddress = ServerData.ServerAddress,
            ServerPort = ServerData.ServerPort,
            ServerEra = ServerData.ServerEra,
            PvPEnabled = ServerData.PvPEnabled,
            ServerWebsite = ServerData.ServerWebsite,
            ServerBanner = ServerData.ServerBanner
        };

        var response = await _client.PostAsJsonAsync("https://localhost:7015/api/favorites/list/item/add", favItemData);

        try
        {
            if (response.IsSuccessStatusCode)
            {
                var favDataResponse = await response.Content.ReadFromJsonAsync<FavoritesDataReponse>();

                StateHasChanged();
            }
            else
            {
                var favRequestFailed = await response.Content.ReadFromJsonAsync<RequestFailedResponse>();

                Console.WriteLine("Failed AddFavorite Request");
                Console.WriteLine($"Status Code: {favRequestFailed.StatusCode}");
                Console.WriteLine($"Message: {favRequestFailed.Message}");

                _navManager.NavigateTo("/signin");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Exception: {ex.Message}");
        }
    }

    public static bool IsValidUrl(string url)
    {
        try
        {
            Uri.TryCreate(url, UriKind.Absolute, out Uri result);
            return (result != null) && (result.Scheme == Uri.UriSchemeHttp || result.Scheme == Uri.UriSchemeHttps);
        }
        catch (Exception)
        {
            return false;
        }
    }
}
