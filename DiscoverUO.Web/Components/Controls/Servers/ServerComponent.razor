@using System.Net
@using System.Net.Http
@using DiscoverUO.Lib.Shared
@using System.Net.Http.Headers
@using DiscoverUO.Lib.Shared.Data
@using DiscoverUO.Lib.Shared.Contracts

@inject HttpClient client
@inject ISnackbar snackbar
@inject NavigationManager navManager

@if( ServerData != null )
{
    <MudPaper>
        <MudItem Class="mt-4 pa-4 mud-theme-primary">
            <MudCard>
                <MudCardContent>
                    <MudText Typo="Typo.h2" Align="Align.Center">@ServerData.ServerName</MudText>
                    @if (ShowBanner( ServerData.ServerBanner ))
                    {
                        <MudCardMedia Height="150" Image="@ServerData.ServerBanner" /> 
                    }
                    <MudText Typo="Typo.h5" Align="Align.Left">Server Era: @ServerData.ServerEra, PvP Enabled: @ServerData.PvPEnabled, @ServerData.Votes Votes</MudText>
                    <MudText Typo="Typo.h5" Align="Align.Left">Server Address: @ServerData.ServerAddress</MudText>
                    <MudText Typo="Typo.h5" Align="Align.Left">Server Port: @ServerData.ServerPort</MudText>
                    <MudText Typo="Typo.h5" Align="Align.Left">
                        Shard Website: <a target="_blank" href="@ServerData.ServerWebsite">@ServerData.ServerWebsite</a>
                    </MudText>
                    <MudText Typo="Typo.h5" Align="Align.Left">Server ID: @ServerData.Id</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudSpacer />
                    <MudSpacer />
                    <MudSpacer />

                    @if(UserSession.UserAuthenticated )
                    {
                        <MudButton Variant="Variant.Outlined" OnClick="@(() => AddFavoriteOnClick(ServerData))" Color="Color.Primary">Favorite</MudButton>
                        <MudButton Variant="Variant.Outlined" OnClick="@VoteOnClick" Color="Color.Primary">Vote</MudButton>

                        if (UserSession.UserOwnedServers.Contains(ServerData) || UserSession.Role >= UserRole.Moderator)
                        {
                            <MudButton Variant="Variant.Outlined" OnClick="@(() => EditServerOnClick(ServerData))" Color="Color.Primary">Edit</MudButton>
                            <MudButton Variant="Variant.Outlined" OnClick="@(() => RemoveServerOnClick(ServerData))" Color="Color.Primary">Remove</MudButton>
                        }
                    }
                    <MudSpacer />
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudPaper>
}

@code {
    [Parameter]
    public ServerData ServerData{ get; set; }

    [CascadingParameter]
    public SessionManager UserSession{ get; set; }

    private void EditServerOnClick( ServerData data )
    {
        ServerUpdateData updateData = new ServerUpdateData();

        updateData.ServerName = data.ServerName;
        updateData.ServerAddress = data.ServerAddress;
        updateData.ServerPort = data.ServerPort;
        updateData.PvPEnabled = data.PvPEnabled;
        updateData.ServerEra = data.ServerEra;
        updateData.ServerBanner = data.ServerBanner;
        updateData.ServerWebsite = data.ServerWebsite;
        updateData.IsPublic = data.IsPublic;

        UserSession.UpdateServerTmp = updateData;
        UserSession.UpdateServerId = data.Id;

        navManager.NavigateTo("/servers/update");
    }

    private void RemoveServerOnClick(ServerData data)
    {
        var removeServerRsp = UserSession.RemoveServer(data.Id, data, client);

        if (removeServerRsp.Success)
        {
            var updatePublicServers = UserSession.GetPublicServersList(client);
            var updateUserOwnedServers = UserSession.GetUserOwnedServers(client);
            UserSession.UserOwnedServers.RemoveAll(x => x.Id == data.Id);

            snackbar.Add(removeServerRsp.Message, Severity.Success);
        }
        else
        {
            snackbar.Add(removeServerRsp.Message, Severity.Error);
        }

        StateHasChanged();
        navManager.Refresh();
    }

    /// <summary>
    /// NOT IMPLEMENTED
    /// </summary>
    private void VoteOnClick()
    {
        // NOT IMPLEMENTED
    }

    private bool ShowBanner(string banner)
    {
        if (!string.IsNullOrEmpty(banner))
        {
            if (IsValidUrl(banner))
            {
                if (IsValidImageUrl(banner))
                    return true;
            }
        }

        return false;
    }

    private async Task AddFavoriteOnClick(ServerData data)
    {
        if (!UserSession.UserAuthenticated)
        {
            snackbar.Add($"You must be logged in to add a server to your favorites list.", Severity.Error);
            return;
        }

        if (ServerIsFavorited(data.Id ))
        {
            snackbar.Add($"You can only add a server to your favorites list once.", Severity.Error);
            return;
        }

        var favItemData = new FavoriteItemData
            {
                ServerId = data.Id,
                ServerName = data.ServerName,
                ServerAddress = data.ServerAddress,
                ServerPort = data.ServerPort,
                ServerEra = data.ServerEra,
                PvPEnabled = data.PvPEnabled,
                ServerWebsite = data.ServerWebsite,
                ServerBanner = data.ServerBanner
            };

        var favItemRsp = UserSession.AddUserFavoritesItem(favItemData, client);

        if( favItemRsp.Success )
        {
            snackbar.Add("Server successfully added to your favorites!", Severity.Success);
        }
        else
        {
            if (favItemRsp is ExceptionThrownResponse)
            {
                ExceptionThrownResponse exeThrown = favItemRsp as ExceptionThrownResponse;

                snackbar.Add($"Failure to add server to favorites.", Severity.Error);
                Console.WriteLine(exeThrown.Message);
            }
            else
            {
                snackbar.Add($"Failure to add server to favorites: {favItemRsp.Message}", Severity.Error);
            }
        }

        StateHasChanged();
    }

    private bool ServerIsFavorited(int id)
    {
        var getFavsRsp = UserSession.GetUserFavoritesData(client);

        if (!getFavsRsp.Success)
            return false;

        var favData = UserSession.UserFavorites.FavoritedItems.Where(s => s.Id == id).ToList();

        if (favData != null && favData.Count > 0)
            return true;

        return false;
    }

    public static bool IsValidUrl(string url)
    {
        try
        {
            Uri.TryCreate(url, UriKind.Absolute, out Uri result);
            return (result != null) && (result.Scheme == Uri.UriSchemeHttp || result.Scheme == Uri.UriSchemeHttps);
        }
        catch (Exception)
        {
            return false;
        }
    }

    public bool IsValidImageUrl(string imageUrl)
    {
        using (var httpClient = new HttpClient())
        {
            httpClient.DefaultRequestHeaders.Accept.TryParseAdd("image/*");

            try
            {
                var response = httpClient.SendAsync(new HttpRequestMessage(HttpMethod.Head, imageUrl)).Result;
                return response.IsSuccessStatusCode && response.Content.Headers.ContentType.MediaType.StartsWith("image/");
            }
            catch (Exception)
            {
                return false;
            }
        }
    }
}
